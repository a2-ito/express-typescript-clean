swagger: "2.0"
info:
  version: 1.0.0
  title: Users API sample
  description: A sample API that uses users
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:3000
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
tags:
- name: users
  description: "Operations about users"
paths:
  /users:
    get:
      tags:
      - users
      summary: Returns all users
      operationId: findUsers
      parameters: []
      responses:
        "200":
          description: user response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /user:
    post:
      tags:
      - users
      summary: Create a user
      operationId: createUser
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /user/{id}:
    get:
      tags:
      - users
      summary: Get a user by ID
      operationId: findUserbyID
      parameters:
      - in: "path"
        name: "id"
        description: "User ID"
        required: true
        type: "string"
      responses:
        "200":
          description: user response
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid userid supplied
        "404":
          description: User not found
    put:
      tags:
      - users
      summary: Update a user
      operationId: updateUserbyID
      parameters:
      - in: "path"
        name: "id"
        description: "User ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: Updated user object
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid userid supplied
        "404":
          description: User not found
    delete:
      tags:
      - users
      summary: Delete a user
      operationId: updateUserbyID
      parameters:
      - in: "path"
        name: "id"
        description: "User ID"
        required: true
        type: "string"
      responses:
        "400":
          description: Invalid userid supplied
        "404":
          description: User not found
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
